#header; The Printing stage
The target destination of our article is an HTML file. We want to create those by parsing the codebase and executing steps required by the commands.

But how to render the actual HTML? Without a proper tool, that can be a very challenging task. For our purposes, we will use a library called FreeMarker\1\.

#cite; 1; FreeMarker from Apache Foundation; https://freemarker.apache.org/

Apache's FreeMarker is a template engine - a Java library to generate text output (HTML Web pages, e-mails, configuration files, source code, etc.) based on the templates and changing data. Templates are written in a FreeMarker Template Language (FTL), which is a simple specialized language. And, usually, a general-purpose programming language (like Java) is used to prepare data. Let us see how is that implemented by looking at the source code.

Everything starts with an article. The article contains header, styles, and body declaration.
#include; def; com.blaster.business.InteractorPrint::printArticle

Internally, the article printing routine will call for a method to print paragraphs:
#include; def; com.blaster.business.InteractorPrint::printParagraphs

Here are the three methods, responsible for the main chunks of the work:
~ Here is how we print the text nodes:
#include; def; com.blaster.business.InteractorPrint::renderNodeText

~ Here is how to insert a code snippet:
#include; def; com.blaster.business.InteractorPrint::renderNodeCode

~ And here is how we handle the commands:
#include; def; com.blaster.business.InteractorPrint::renderNodeCommand

We are printing nodes by delegating pieces of the tasks to the helper methods, like this one:
#include; def; com.blaster.business.InteractorPrint::printTemplateParagraph
Each of those will handle its piece of the overall article accordingly.

At this point, we had a look at all steps required for processing the article - starting from the scenario and until the actual HTML output. Of course, we did not cover everything. The best place to find each and every detail is the source code. But I hope, at this point, most of the high-level concepts are explained.

#header; What's next?
Any craftsman can say that there is no tool, which works equally well for every job. The idea behind Lem is to be versatile enough to showcase some of the projects on which I am working.

In this series of articles, I have shown a full pipeline of the project: from the preparation of the material to the printing stage.

The main target for Lem is to be a handy tool in explaining the Blaster - an offline renderer, on which I am currently working. I hope this article was interesting enough and will be glad to see you soon on the pages dedicated to the actual hobby - the Blaster engine - Poyekhali!\2\

#cite; 2; Gagarin's "Poyekhali" on Wikipedia; https://en.wikipedia.org/wiki/File:Gagarin-Poyekhali.ogg